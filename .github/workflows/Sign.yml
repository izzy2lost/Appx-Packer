name: Sign MSIX Package

on:
  push:
    branches:
      - main  # or whichever branch you prefer to trigger this workflow

jobs:
  sign-msix:
    runs-on: windows-latest

    steps:
    # Step 1: Checkout the Appx-Packer repository
    - name: Checkout Appx-Packer repository
      uses: actions/checkout@v4

    # Step 2: Unpack MSIX package using 7zip
    - name: Unpack MSIX package using 7zip
      run: |
        & "C:\Program Files\7-Zip\7z.exe" x sdl-min_1.0.0.0_x64.msix -oextracted

    # Step 3: Automate Appx-Packer GUI to sign MSIX
    - name: Run Appx-Packer to sign MSIX
      run: |
        # Start Appx-Packer
        $appxPacker = Start-Process -FilePath "Appx-Packer.exe" -PassThru
        Start-Sleep -Seconds 3  # Wait for the GUI to open

        # Load Windows Forms for SendKeys
        Add-Type -AssemblyName System.Windows.Forms

        # Bring Appx-Packer to the front
        [System.Windows.Forms.SendKeys]::SendWait("%{TAB}")  # Alt+Tab to focus

        # Input the paths and password (adjust based on UI layout)
        Start-Sleep -Seconds 1
        [System.Windows.Forms.SendKeys]::SendWait("extracted{TAB}")  # Set input folder
        Start-Sleep -Seconds 1
        [System.Windows.Forms.SendKeys]::SendWait("signed_output{TAB}")  # Set output folder
        Start-Sleep -Seconds 1
        [System.Windows.Forms.SendKeys]::SendWait("certificate.pfx{TAB}")  # Set certificate path
        Start-Sleep -Seconds 1
        [System.Windows.Forms.SendKeys]::SendWait("1330{ENTER}")  # Enter password
        Start-Sleep -Seconds 3  # Wait for signing

        # Close Appx-Packer if needed
        Stop-Process -Name "Appx-Packer" -Force

    # Step 4: Upload the signed MSIX package
    - name: Upload signed MSIX package
      uses: actions/upload-artifact@v4
      with:
        name: signed-msix
        path: signed_output/signed_sdl-min_1.0.0.0_x64.msix
